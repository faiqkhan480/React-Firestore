{"version":3,"sources":["config/firebase.js","components/profile.js","components/login.js","App.js","serviceWorker.js","index.js"],"names":["fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","Profile","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","user","auth","signOut","react_default","a","createElement","Container","className","Card","CardBody","CardTitle","CardText","Button","onClick","logout","bind","React","Component","Login","email","password","event","setState","defineProperty","target","name","value","preventDefault","_this$state","console","log","signInWithEmailAndPassword","catch","error","_this$state2","Form","inline","onSubmit","handleSubmit","FormGroup","Label","for","Input","type","placeholder","onChange","handleChange","NavLink","href","App","uid","_this2","onAuthStateChanged","profile","login","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c8f2a53.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nvar config = {\r\n    apiKey: \"AIzaSyCsc_C7QIiBzCpPcyKBsFvsuEccHHOW-a8\",\r\n    authDomain: \"todo-c64e8.firebaseapp.com\",\r\n    databaseURL: \"https://todo-c64e8.firebaseio.com\",\r\n    projectId: \"todo-c64e8\",\r\n    storageBucket: \"todo-c64e8.appspot.com\",\r\n    messagingSenderId: \"867932857254\",\r\n    appId: \"1:867932857254:web:92f8cbf72bf352f1332567\",\r\n    measurementId: \"G-4LGGPN3MGY\"\r\n};\r\n\r\nconst fire =  firebase.initializeApp(config);\r\nexport const db = firebase.firestore(fire);\r\n\r\nexport default fire","import React from 'react';\r\nimport firebase from \"firebase\";\r\nimport { Container, Card, CardText, CardBody, CardTitle, Button } from 'reactstrap'\r\n\r\nclass Profile extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            user: ''\r\n        }\r\n    }\r\n\r\n    logout() {\r\n        firebase.auth().signOut();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Container className=\"container\">\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Card title</CardTitle>\r\n                        <CardText>Some quick example text to build on the card title and make up the bulk of the card's content.</CardText>\r\n                        <Button onClick={this.logout.bind(this)}>Logout</Button>\r\n                    </CardBody>\r\n                </Card>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Profile","import React, { Component } from 'react';\r\nimport firebase from \"firebase\";\r\nimport { Container, Button, Form, FormGroup, Label, Input, NavLink } from 'reactstrap';\r\n\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n        }\r\n    }\r\n\r\n    handleChange(event){\r\n        this.setState({[event.target.name]: event.target.value})\r\n    }\r\n\r\n    handleSubmit(event)  {\r\n        event.preventDefault();\r\n        const { email, password } = this.state;\r\n        console.log(this.state, 'state------')\r\n        this.setState({\r\n            email: '',\r\n            password: '',\r\n        })\r\n        firebase.auth().signInWithEmailAndPassword(email, password)\r\n            .catch(error => {console.log(error, 'error on signin')})\r\n    }\r\n\r\n    render() {\r\n        const { email, password } = this.state;\r\n        return (\r\n            <Container className=\"container\">\r\n                <Form inline onSubmit={this.handleSubmit.bind(this)}>\r\n                    <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\r\n                        <Label for=\"Email\" className=\"mr-sm-2\">Email</Label>\r\n                        <Input type=\"email\" name=\"email\" value={email} placeholder=\"something@idk.cool\" onChange={this.handleChange.bind(this)} />\r\n                    </FormGroup>\r\n                    <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\r\n                        <Label for=\"Password\" className=\"mr-sm-2\">Password</Label>\r\n                        <Input type=\"password\" name=\"password\"  value={password} placeholder=\"don't tell!\" onChange={this.handleChange.bind(this)} />\r\n                    </FormGroup>\r\n                    <Button type=\"submit\">Submit</Button>\r\n                </Form>\r\n                <NavLink href=\"#\">Don't have an account ?</NavLink>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login","import React, { Component } from 'react';\r\nimport fire from \"./config/firebase\";\r\nimport './App.css';\r\n// import PageNavbar from './components/PageNavbar';\r\nimport Table from './components/profile';\r\nimport Login from \"./components/login\";\r\n// import Signup from \"./components/signup\";\r\n\r\nclass App extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            uid: '',\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        fire.auth().onAuthStateChanged(user => {\r\n            if(user) {\r\n                console.log(user, 'this user is signin')\r\n                this.setState({uid: user.uid})\r\n            } else {\r\n                console.log(\"user is not signin\")\r\n                this.setState({uid: null})\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { uid } = this.state\r\n        return (\r\n            <div className=\"App\">\r\n                {uid ? <Table/> : <Login/>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}